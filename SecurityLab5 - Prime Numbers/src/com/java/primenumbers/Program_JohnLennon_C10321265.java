package com.java.primenumbers;
/* The following code was originally written by Meng Cui,
 * implemented by John Lennon C10321265 DT228/4
 * 
 */
import java.math.BigInteger;
import java.util.Random;
import java.security.SecureRandom;

public class Program_JohnLennon_C10321265 
{
	
	public static Random ran = new SecureRandom();
	
	public static blumblum blumBlum;
	public static AES aes;
	
	public static void main(String[] args)
	{
		
		blumBlum = new blumblum();
		aes = new AES();
		
		
		BigInteger BLUM = blumBlum.generateRondomNumber(); //creates a pseudorandom number with blum blum shub
		BigInteger aes_hold = aes.generateRondomNumber2(); //creates a psuedorandom number with AES
		BigInteger total;
		total = BLUM.add(aes_hold);  //total has BLUM and AES_hold added together
		
		//Question 1
		System.out.println("Question 1");
		System.out.println("blum blum shub: " + BLUM);
		System.out.println("AES: " + aes_hold);
		System.out.println("Total: " + total);
		System.out.println("  ");
		
		//Question 2
		System.out.println("Question 2");
		if(MillerRabin.PrimeTest(total))
		{
			System.out.println("The total number a prime number");
		}
		else
		{
			System.out.println("The total number is not a prime number");
		}
		System.out.println("  ");
		
		//Question 3 - make 10 large prime numbers
		System.out.println("Question 3");
		tenPrimes();
		System.out.println("  ");
		
		//Question 4 - Given a prime number, generate the next prime number;
		System.out.println("Question 4");
		nextPrime();
		System.out.println("  ");
		
		//Question 5 - check if public key is a prime
		System.out.println("Question 5");
		String mine = "109816978667074884883119666765675388665269105739078101435610310177797510475101738653519811843838068109887173434876741188067112481081131165783771165611453525212011510511998977911265845310385120105548010487102677910710778101115100868272771058686881217549551041108810111983789910511552779054519875101877382705386120735610799119844810411386868267728857511207411979109711135180981081118410611010056697911410610573795279681228355676765119577165898211585116121541207771107655312043474910654104665186121107108798111412279111878370108551081097383122531048266675554100107848112155102100841137149105978677768452113115531021115769104108471187010010477577878708152531217755971055012212198434910910282811128385886512051101887397106755111090104777311650784950115748310965519099791174852107858689816687104731167290102904710343528112012210153119112576566696665657148761071121189771521038471861179810957117736710485977110812273714911890728611590831071038071771207768771217784735078856611610187821121006753112908454746584566969119696765671077065108748848831196771121777067818067901196572671191077366119776765818986676573746710311569701037368658173101658173881036565756782656711711474979776667711710211477664752567911567771041011219765694310771771091098884561061094787501177151118811021041111185369121781069754887073818586811077810511111156100895711811767521094311611390738879514788797069561037779821075110310211289801189011172105114735243868011911111948116524856651048511271102102109112651148611311311110710668101557085117485111910966111101971171015411411912211773514950767567711015156103120112508884117110105556966909010311572118112811055248978449519999103687155718811585745789877811310254651165411448105751086611471112102971091061047272112106114817811483748250827411783565151515166805651841011211061008069508610282109791177375751211007953556810349102745510751717643113725310511050748369795684528911688105108775657101436943678310111299814312211854855378671151081001101005310084108561115710168697310811368821039711511086808511781697866707488488311966676567119738073861089753120819812011511190714951797199747787697711610668881187865731121091017199661028251508773116484399806811586115661191124774100537766471027254671156572741218154435710189834947884980431065510978501159967751138549497612010710711410410952871037256509850111885710079798511047809811782831086679104701051076987110904385777647431157010811599508711011797698273505582771217372116771091078173971135367434812011656524368109685610710411657571131017385112491046947854950115117107771041178467103695512152838154871228051102105985773559883711075183508077117119654379678510711647855610974671118656106707789121120109797711311012212210698491185254651029910956871201049065434811576531131147311110910611449538679104721191021151177669108435771111111109725450524743110811161147410497701221141048253831098774806566696665657174658385697165696765655670651087488488311967711191197067818067901196565671031078165114113121871091051198476109851158110243774711987544947561188211074561145010675561029853849711084521155511847879943661035697113111808682838010797557997758067122741027143111874367671161131046989566955548866103801077154739976115871125147106114576588120807811879106120102103784386112106741071196811786988011511870731126984118568286781071091048210778111538082120705182841021128411276831017155995756789712010467101102751055771837197748688531151127268685211611179551086912288536710547881141088448115545479515711784571107147701075584481045079664310683886577745690109118887284831098554717677701201028511699811016974821191141014851736590717679110977085107875669861069067688253111761157411455906980865386715010210957817586114111551088075116711014752891156511712275856583717289116846950526698566676117115755777691041098768102981121104911681616161110998083";
		pubKey_check(mine);
		
	}
	
	
	//Question 3
	//This function creates random numbers using the probablePrime command
	public static String tenPrimes()
	{
		System.out.println("A random prime number has been generated: ");
		
		for(int i = 0; i < 10; i++)
		{
			//this prints out a prime number 10 ten times. 
			//Proabable prime is not always accurate however, issues with large numbers arise
			System.out.println("Random number " + (i + 1) + " is: " + BigInteger.probablePrime(2000,ran));	
			
		}
		return null;
	}
	
	
	//Question 4
	//is the same as the last function but set to find only the following number
	public static String nextPrime()
	{
		
		BigInteger ran_start = BigInteger.probablePrime(300,ran); //create a large prime bigInt
		System.out.println(ran_start + ", the next prime is "); //print it
		
		System.out.println(ran_start.nextProbablePrime());
		
		return null;
	}
	
	//Question 5
	//check my public key for prime value
	public static String pubKey_check(String key)
	{
		
		BigInteger part1 = new BigInteger(key);
		
		System.out.println(part1);
		
		//isProbablePrime is inaccurate but in the absence 
		//of a more accurate function I have to use it 
		boolean prime = part1.isProbablePrime(1);
		System.out.print("Is it a prime number: ");
		System.out.println(prime);
		
		return null;
	}
	
	
}



